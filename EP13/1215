#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_LINES 10000
#define MAX_CHARS 200
#define MAX_WORDS 5000

typedef struct TreeNode {
    char* word;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

TreeNode* createNode(char* word) {
    TreeNode* node = (TreeNode*)malloc(sizeof(TreeNode));
    node->word = strdup(word);
    node->left = NULL;
    node->right = NULL;
    return node;
}

TreeNode* insert(TreeNode* root, char* word) {
    if (root == NULL) {
        return createNode(word);
    }

    int compare = strcasecmp(word, root->word);
    if (compare < 0) {
        root->left = insert(root->left, word);
    } else if (compare > 0) {
        root->right = insert(root->right, word);
    }

    return root;
}

void printWords(TreeNode* root) {
    if (root != NULL) {
        printWords(root->left);
        printf("%s\n", root->word);
        printWords(root->right);
    }
}

int main() {
    char lines[MAX_LINES][MAX_CHARS];
    TreeNode* root = NULL;

    // Ler as linhas de texto
    int numLines = 0;
    while (fgets(lines[numLines], MAX_CHARS, stdin) != NULL) {
        numLines++;
        if (numLines >= MAX_LINES) {
            break;
        }
    }

    // Extrair as palavras das linhas
    int i, j;
    for (i = 0; i < numLines; i++) {
        char* line = lines[i];
        char word[MAX_CHARS] = "";
        int wordIndex = 0;

        for (j = 0; line[j] != '\0'; j++) {
            char c = tolower(line[j]);
            if (isalpha(c)) {
                word[wordIndex++] = c;
            } else if (wordIndex > 0) {
                word[wordIndex] = '\0';
                root = insert(root, word);
                wordIndex = 0;
            }
        }

        if (wordIndex > 0) {
            word[wordIndex] = '\0';
            root = insert(root, word);
        }
    }

    // Imprimir as palavras
    printWords(root);

    // Liberar a mem√≥ria alocada
    free(root);

    return 0;
}
