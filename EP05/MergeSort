#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void merge(int arr[], int left[], int right[], int left_size, int right_size) {
    int i = 0, j = 0, k = 0;

    while (i < left_size && j < right_size) {
        if (left[i] <= right[j]) {
            arr[k] = left[i];
            i++;
        } else {
            arr[k] = right[j];
            j++;
        }
        k++;
    }

    while (i < left_size) {
        arr[k] = left[i];
        i++;
        k++;
    }

    while (j < right_size) {
        arr[k] = right[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int n) {
    if (n < 2) {
        return;
    }

    int mid = n / 2;
    int left[mid], right[n - mid];

    for (int i = 0; i < mid; i++) {
        left[i] = arr[i];
    }

    for (int i = mid; i < n; i++) {
        right[i - mid] = arr[i];
    }

    mergeSort(left, mid);
    mergeSort(right, n - mid);

    merge(arr, left, right, mid, n - mid);
}

int main() {
    int n, i;
    clock_t inicio, fim;
    double tempo;

    printf("Entre com o tamanho do array: ");
    scanf("%d", &n);

    int arr[n];

    // Preenche o array com números aleatórios
    srand(time(NULL));
    for (i = 0; i < n; i++) {
        arr[i] = rand();
    }

    inicio = clock(); // marca o tempo inicial

    mergeSort(arr, n);

    fim = clock(); // marca o tempo final

    tempo = (double)(fim - inicio) * 1000 / CLOCKS_PER_SEC; // calcula o tempo em milissegundos

    printf("\nO algoritmo de ordenação levou %.2f milissegundos para ser executado.\n", tempo);

    return 0;
}
